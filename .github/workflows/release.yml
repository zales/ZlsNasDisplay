name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v3.0.0, v3.1.0, etc.

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: |
          # Install without lgpio (optional hardware dependency)
          poetry install --with dev 2>&1 | tee install.log || true
          echo "Dependencies installed (lgpio may have failed - that's OK)"

      - name: Run tests
        env:
          GPIOZERO_PIN_FACTORY: mock
        run: |
          poetry run pytest -v \
            --ignore=deb_dist --ignore=dist --ignore=debian \
            --ignore=tests/test_matter_device.py

      - name: Extract version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Update version in pyproject.toml
        run: |
          sed -i 's/^version = .*/version = "${{ steps.get_version.outputs.VERSION }}"/' pyproject.toml

      - name: Build Python package
        run: |
          poetry build
          ls -lh dist/

      - name: Generate comprehensive changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
          echo "Previous tag: $PREV_TAG"
          echo "Current tag: ${GITHUB_REF#refs/tags/}"

          # Generate categorized changelog
          {
            echo "CHANGELOG<<EOF"
            echo ""
            echo "## 🚀 Features"
            git log ${PREV_TAG}..HEAD --pretty=format:"- %s" --grep="^Add\|^Feat" || echo "- No new features"
            echo ""
            echo ""
            echo "## 🔧 Changes"
            git log ${PREV_TAG}..HEAD --pretty=format:"- %s" --grep="^Change\|^Update\|^Improve\|^Refactor\|^Optimize" || echo "- No changes"
            echo ""
            echo ""
            echo "## 🐛 Bug Fixes"
            git log ${PREV_TAG}..HEAD --pretty=format:"- %s" --grep="^Fix" || echo "- No bug fixes"
            echo ""
            echo ""
            echo "## 📝 Documentation"
            git log ${PREV_TAG}..HEAD --pretty=format:"- %s" --grep="^Docs\|^Doc" || echo "- No documentation changes"
            echo ""
            echo ""
            echo "## 🔨 Other Changes"
            git log ${PREV_TAG}..HEAD --pretty=format:"- %s" --grep="^Merge\|^Bump" --invert-grep --grep="^Add\|^Feat\|^Fix\|^Change\|^Update\|^Improve\|^Refactor\|^Optimize\|^Docs\|^Doc" --invert-grep || echo "- No other changes"
            echo ""
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create tarball with Python package
        run: |
          mkdir -p release/zlsnasdisplay-${{ steps.get_version.outputs.VERSION }}
          cp dist/*.whl dist/*.tar.gz release/zlsnasdisplay-${{ steps.get_version.outputs.VERSION }}/ 2>/dev/null || true
          cp README.md CHANGELOG.md LICENSE release/zlsnasdisplay-${{ steps.get_version.outputs.VERSION }}/
          cd release
          tar -czf zlsnasdisplay-${{ steps.get_version.outputs.VERSION }}-python.tar.gz zlsnasdisplay-${{ steps.get_version.outputs.VERSION }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release v${{ steps.get_version.outputs.VERSION }}
          body: |
            # 🎉 ZlsNasDisplay v${{ steps.get_version.outputs.VERSION }}

            E-ink display manager for Raspberry Pi NAS with Matter support.

            ---

            ## 📦 Installation

            ### Using pip (Recommended)
            ```bash
            pip install zlsnasdisplay==${{ steps.get_version.outputs.VERSION }}

            # On Raspberry Pi with GPIO hardware:
            pip install zlsnasdisplay[${{ steps.get_version.outputs.VERSION }}] -E hardware
            ```

            ### Using Poetry
            ```bash
            poetry add zlsnasdisplay@${{ steps.get_version.outputs.VERSION }}

            # With hardware support:
            poetry add zlsnasdisplay@${{ steps.get_version.outputs.VERSION }} -E hardware
            ```

            ### From source
            ```bash
            git clone https://github.com/${{ github.repository }}.git
            cd ZlsNasDisplay
            git checkout v${{ steps.get_version.outputs.VERSION }}
            poetry install -E hardware  # On Raspberry Pi
            poetry run zlsnasdisplay
            ```

            ---

            ## 📝 What's Changed

            ${{ steps.changelog.outputs.CHANGELOG }}

            ---

            ## 🔧 System Requirements

            - **Python:** 3.11+ (Matter support requires 3.11+)
            - **Hardware:** Raspberry Pi with Waveshare 2.9" e-ink display (EPD)
            - **Optional:** Root privileges for apt package updates
            - **Optional:** avahi-utils for Matter/mDNS functionality

            ## ✨ Features

            - 📊 Real-time system metrics display (CPU, RAM, disk, network)
            - 🌐 Web dashboard with WebSocket updates
            - 🏠 Matter/CHIP smart home integration
            - 📱 QR code commissioning for Apple Home, Google Home, Home Assistant
            - 🌡️ Temperature sensors for CPU and NVMe
            - 📈 Network traffic monitoring
            - 🔄 Automatic system updates checking

            ## 🚀 Quick Start

            ### Basic Usage
            ```bash
            zlsnasdisplay
            ```

            ### With Web Dashboard
            ```bash
            ENABLE_WEB_DASHBOARD=true zlsnasdisplay
            # Access at http://<raspberry-pi-ip>:8000
            ```

            ### With Matter Integration
            ```bash
            ENABLE_MATTER=true zlsnasdisplay
            # Scan QR code on display to commission device
            ```

            ---

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.env.PREV_TAG }}...v${{ steps.get_version.outputs.VERSION }}

            📚 **Documentation**: https://github.com/${{ github.repository }}/blob/main/README.md
            🐛 **Report Issues**: https://github.com/${{ github.repository }}/issues
          files: |
            release/zlsnasdisplay-${{ steps.get_version.outputs.VERSION }}-python.tar.gz
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
